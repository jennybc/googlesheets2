% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sheets_auth.R
\name{sheets_auth}
\alias{sheets_auth}
\title{Authorize googlesheets4}
\usage{
sheets_auth(email = NULL, path = NULL,
  scopes = "https://www.googleapis.com/auth/spreadsheets",
  cache = getOption("gargle.oauth_cache"),
  use_oob = getOption("gargle.oob_default"))
}
\arguments{
\item{email}{Optional; email address associated with the desired Google user.}

\item{path}{Optional; path to the downloaded JSON file for a service token.}

\item{scopes}{Optional; scope(s) to use. See your choices at
\href{https://developers.google.com/identity/protocols/googlescopes#sheetsv4}{OAuth 2.0 Scopes for Google APIs}.}

\item{cache}{A logical value or a string. \code{TRUE} means to cache using the
default user-level cache file, \code{~/.R/gargle/gargle-oauth}, \code{FALSE} means
don't cache, and \code{NA} means to guess using some sensible heuristics. A
string means use the specified path as the cache file.}

\item{use_oob}{If \code{FALSE}, use a local webserver for the OAuth dance.
Otherwise, provide a URL to the user and prompt for a validation code.
Defaults to the option "gargle.oob_default" or \code{TRUE} if httpuv is not
installed.}
}
\description{
Authorize googlesheets4 to view and manage your Google Sheets. By default,
you are directed to a web browser, asked to sign in to your Google
account, and to grant googlesheets4 permission to operate on your behalf
with Google Sheets. By default, these user credentials are cached in a
file below your home directory, \code{~/.R/gargle/gargle-oauth}, from where
they can be automatically refreshed, as necessary. Storage at the user
level means the same token can be used across multiple projects and
tokens are less likely to be synced to the cloud by accident.
}
\details{
Most users, most of the time, do not need to call \code{sheets_auth()}
explicitly -- it is triggered by the first action that requires
authorization. Even when called, the default arguments often suffice.
However, when necessary, this function allows the user to explicitly:
\itemize{
\item Declare which Google identity to use, via an email address. If there
are multiple cached tokens, this can clarify which one to use. It can
also force googlesheets4 to switch from one identity to another. If
there's no cached token for the email, this triggers a return to the
browser to choose the identity and give consent.
\item Load a service account token (as opposed to OAuth).
\item Specify non-default behavior re: token caching and out-of-bound
authentication.
}

For even deeper control over auth, use \code{\link[=sheets_auth_config]{sheets_auth_config()}} to use
your own OAuth app or API key.
}
\examples{
\dontrun{
## load/refresh existing credentials, if available
## otherwise, go to browser for authentication and authorization
sheets_auth()

## force use of a token associated with a specific email
sheets_auth(email = "jenny@example.com")

## use a 'read only' scope, so it's impossible to edit or delete Sheets
sheets_auth(
  scopes = "https://www.googleapis.com/auth/spreadsheets.readonly"
)

## use a service account token
sheets_auth(path = "foofy-83ee9e7c9c48.json")
}
}
\seealso{
Other auth functions: \code{\link{sheets_auth_config}},
  \code{\link{sheets_deauth}}
}
\concept{auth functions}
